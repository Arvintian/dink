/*
Copyright The Dink Authors.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "dink/pkg/apis/dink/v1beta1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ContainerLister helps list Containers.
// All objects returned here must be treated as read-only.
type ContainerLister interface {
	// List lists all Containers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Container, err error)
	// Containers returns an object that can list and get Containers.
	Containers(namespace string) ContainerNamespaceLister
	ContainerListerExpansion
}

// containerLister implements the ContainerLister interface.
type containerLister struct {
	indexer cache.Indexer
}

// NewContainerLister returns a new ContainerLister.
func NewContainerLister(indexer cache.Indexer) ContainerLister {
	return &containerLister{indexer: indexer}
}

// List lists all Containers in the indexer.
func (s *containerLister) List(selector labels.Selector) (ret []*v1beta1.Container, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Container))
	})
	return ret, err
}

// Containers returns an object that can list and get Containers.
func (s *containerLister) Containers(namespace string) ContainerNamespaceLister {
	return containerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ContainerNamespaceLister helps list and get Containers.
// All objects returned here must be treated as read-only.
type ContainerNamespaceLister interface {
	// List lists all Containers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Container, err error)
	// Get retrieves the Container from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Container, error)
	ContainerNamespaceListerExpansion
}

// containerNamespaceLister implements the ContainerNamespaceLister
// interface.
type containerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Containers in the indexer for a given namespace.
func (s containerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Container, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Container))
	})
	return ret, err
}

// Get retrieves the Container from the indexer for a given namespace and name.
func (s containerNamespaceLister) Get(name string) (*v1beta1.Container, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("container"), name)
	}
	return obj.(*v1beta1.Container), nil
}
